name: Realtime Trending Monitor & Content Generator
on:
  schedule:
    - cron: '*/15 * * * *'
  workflow_dispatch:
    inputs:
      force_analysis:
        description: 'Force analysis (ignore time windows)'
        required: false
        default: false
        type: boolean
      check_only:
        description: 'Analyze only, do not generate'
        required: false
        default: false
        type: boolean
      max_articles:
        description: 'Max number of articles to generate'
        required: false
        default: '2'
        type: string
permissions:
  contents: write
jobs:
  trending-monitor:
    concurrency:
      group: realtime-trending
      cancel-in-progress: true
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Setup environment
        run: |
          mkdir -p data/realtime_trends
          mkdir -p data/generation_history
          mkdir -p data/trending_cache
          echo "PYTHONIOENCODING=utf-8" >> $GITHUB_ENV
          echo "TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}" >> $GITHUB_ENV
          echo "TELEGRAM_CHAT_ID=${{ secrets.TELEGRAM_CHAT_ID }}" >> $GITHUB_ENV
          echo "REDDIT_CLIENT_ID=${{ secrets.REDDIT_CLIENT_ID }}" >> $GITHUB_ENV
          echo "REDDIT_CLIENT_SECRET=${{ secrets.REDDIT_CLIENT_SECRET }}" >> $GITHUB_ENV
          echo "REDDIT_USERNAME=${{ secrets.REDDIT_USERNAME }}" >> $GITHUB_ENV
          echo "REDDIT_PASSWORD=${{ secrets.REDDIT_PASSWORD }}" >> $GITHUB_ENV
          echo "YOUTUBE_API_KEY=${{ secrets.YOUTUBE_API_KEY }}" >> $GITHUB_ENV
      - name: Check trending and trigger
        id: trending_check
        run: |
          echo "Starting realtime trending analysis..."
          FORCE_ANALYSIS="${{ github.event.inputs.force_analysis || 'true' }}"
          CHECK_ONLY="${{ github.event.inputs.check_only || 'false' }}"
          MAX_ARTICLES="${{ github.event.inputs.max_articles || '2' }}"
          ARGS=""
          if [ "$FORCE_ANALYSIS" = "true" ]; then
            ARGS="$ARGS --force-analysis"
          fi
          if [ "$CHECK_ONLY" = "true" ]; then
            ARGS="$ARGS --check-only"
          fi
          python scripts/realtime_workflow.py $ARGS --max-articles $MAX_ARTICLES
      - name: Content uniqueness guard
        if: steps.trending_check.outputs.has_new_content == 'true'
        run: |
          if [ -f generated_files.txt ]; then
            echo "Checking uniqueness of generated content..."
            while IFS= read -r file; do
              if [ -f "$file" ]; then
                python scripts/content_uniqueness_guard.py --target "$file" --threshold 0.88 --days 30 || echo "WARNING: Similar content detected for $file"
              fi
            done < generated_files.txt
          else
            echo "No generated_files.txt present; skipping uniqueness guard."
          fi

      - name: Ensure featured images (relevant & valid)
        if: steps.trending_check.outputs.has_new_content == 'true'
        run: |
          python scripts/fix_featured_images.py || true
      - name: Commit new articles
        if: steps.trending_check.outputs.has_new_content == 'true'
        run: |
          echo "Committing newly generated articles..."
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action - Realtime Trending"
          if [ -n "$(git status --porcelain content/articles/*.md 2>/dev/null)" ]; then
            git add content/articles/*.md
            git add data/realtime_trends/ 2>/dev/null || true
            git add data/generation_history/ 2>/dev/null || true
            current_time=$(date '+%Y-%m-%d %H:%M:%S UTC')
            articles_count="${{ steps.trending_check.outputs.generated_articles }}"
            git commit -m "Realtime: Generated ${articles_count} trending articles - ${current_time} (CI)"
            git push
          else
            echo "No new articles to commit"
          fi
      - name: Notify Telegram (rich)
        if: always()
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          if [ -z "$TELEGRAM_BOT_TOKEN" ] || [ -z "$TELEGRAM_CHAT_ID" ]; then
            echo "Telegram not configured; skipping."
          else
            python scripts/notify_telegram.py --type realtime_trending || true
          fi
