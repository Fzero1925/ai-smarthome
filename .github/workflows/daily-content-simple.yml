name: Daily Content Generation - Simple & Reliable

on:
  schedule:
    # Run at 1:00 AM UTC daily (9:00 AM China time)
    - cron: '0 1 * * *'
  workflow_dispatch:
    inputs:
      article_count:
        description: 'Number of articles to generate'
        required: false
        default: '3'
        type: string
      force_generation:
        description: 'Force generation even if recent articles exist'
        required: false
        default: false
        type: boolean
      quality_mode:
        description: 'Quality check mode (v2=Standard, pqs=PQS v3 Strict)'
        required: false
        default: 'pqs'
        type: choice
        options:
          - 'v2'
          - 'pqs'

permissions:
  contents: write

jobs:
  generate-content:
    concurrency:
      group: daily-content
      cancel-in-progress: false
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create environment file and setup analytics
        run: |
          echo "GOOGLE_ADSENSE_ID=${{ secrets.GOOGLE_ADSENSE_ID }}" >> .env
          echo "AMAZON_AFFILIATE_TAG=${{ secrets.AMAZON_AFFILIATE_TAG }}" >> .env
          echo "GOOGLE_ANALYTICS_ID=${{ secrets.GOOGLE_ANALYTICS_ID }}" >> .env
          echo "REDDIT_CLIENT_ID=${{ secrets.REDDIT_CLIENT_ID }}" >> .env
          echo "REDDIT_CLIENT_SECRET=${{ secrets.REDDIT_CLIENT_SECRET }}" >> .env
          echo "REDDIT_USERNAME=${{ secrets.REDDIT_USERNAME }}" >> .env
          echo "REDDIT_PASSWORD=${{ secrets.REDDIT_PASSWORD }}" >> .env
          echo "YOUTUBE_API_KEY=${{ secrets.YOUTUBE_API_KEY }}" >> .env
          echo "AMAZON_PAAPI_ACCESS_KEY=${{ secrets.AMAZON_PAAPI_ACCESS_KEY }}" >> .env
          echo "AMAZON_PAAPI_SECRET_KEY=${{ secrets.AMAZON_PAAPI_SECRET_KEY }}" >> .env
          
          # Export environment variables for analytics setup
          export GOOGLE_ADSENSE_ID="${{ secrets.GOOGLE_ADSENSE_ID }}"
          export AMAZON_AFFILIATE_TAG="${{ secrets.AMAZON_AFFILIATE_TAG }}"
          export GOOGLE_ANALYTICS_ID="${{ secrets.GOOGLE_ANALYTICS_ID }}"
          export REDDIT_CLIENT_ID="${{ secrets.REDDIT_CLIENT_ID }}"
          export REDDIT_CLIENT_SECRET="${{ secrets.REDDIT_CLIENT_SECRET }}"
          export REDDIT_USERNAME="${{ secrets.REDDIT_USERNAME }}"
          export REDDIT_PASSWORD="${{ secrets.REDDIT_PASSWORD }}"
          export YOUTUBE_API_KEY="${{ secrets.YOUTUBE_API_KEY }}"
          export AMAZON_PAAPI_ACCESS_KEY="${{ secrets.AMAZON_PAAPI_ACCESS_KEY }}"
          export AMAZON_PAAPI_SECRET_KEY="${{ secrets.AMAZON_PAAPI_SECRET_KEY }}"
          
          # Setup analytics configuration
          python scripts/setup_analytics.py

      - name: Prepare content generation
        id: check_needed
        run: |
          # Always generate content - ensure daily article creation
          echo "should_generate=true" >> $GITHUB_OUTPUT
          if [ "${{ github.event.inputs.force_generation }}" = "true" ]; then
            echo "reason=forced_generation" >> $GITHUB_OUTPUT
          else
            echo "reason=daily_content_schedule" >> $GITHUB_OUTPUT
          fi
          
          # Set target article count (default 1, can be overridden)
          article_count="${{ github.event.inputs.article_count || '1' }}"
          echo "target_count=$article_count" >> $GITHUB_OUTPUT

      - name: Refresh multi-source trending cache
        run: |
          python scripts/refresh_trending_keywords.py

      - name: Select daily lineup (2-4 diverse topics)
        run: |
          python scripts/scheduler/select_daily_keywords.py --count "${{ steps.check_needed.outputs.target_count }}"

      - name: Generate and enforce quality (PQS v3/v2)
        env:
          QUALITY_MODE: ${{ github.event.inputs.quality_mode || 'pqs' }}
        run: |
          quality_mode="${QUALITY_MODE}"
          echo "ðŸŽ¯ Quality Mode: $quality_mode"
          
          if [ "$quality_mode" = "pqs" ]; then
            echo "ðŸ”§ Using PQS v3 Strict Mode (85+ score + Hard Gates)"
            python scripts/workflow_quality_enforcer.py \
              --count "${{ steps.check_needed.outputs.target_count }}" \
              --max-attempts 5 \
              --pqs-mode
          else
            echo "ðŸ”§ Using Standard v2 Mode (90% threshold)"
            python scripts/workflow_quality_enforcer.py \
              --count "${{ steps.check_needed.outputs.target_count }}" \
              --max-attempts 5
          fi

      - name: Commit new content
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          git add content/articles/*.md
          
          if ! git diff --staged --quiet; then
            current_date=$(date '+%Y-%m-%d')
            git commit -m "Auto: Daily content update - $current_date - Generated with Claude Code AI Assistant - Co-Authored-By: Claude <noreply@anthropic.com>"
            git push
          fi

      - name: Send Telegram notification
        if: always()
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          if [ "${{ secrets.TELEGRAM_BOT_TOKEN }}" != "" ] && [ "${{ secrets.TELEGRAM_CHAT_ID }}" != "" ]; then
            python scripts/notify_telegram.py \
              --type daily_content \
              --status "${{ job.status }}" \
              --generated "${{ steps.check_needed.outputs.should_generate }}" \
              --reason "${{ steps.check_needed.outputs.reason }}"
          fi
