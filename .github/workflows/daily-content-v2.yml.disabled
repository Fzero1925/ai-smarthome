name: Daily Content Generation v2 (Simplified)

on:
  schedule:
    # Run at 1:00 AM UTC daily (9:00 AM China time)
    - cron: '0 1 * * *'
  workflow_dispatch:  # Allow manual triggering
    inputs:
      article_count:
        description: 'Number of articles to generate'
        required: false
        default: '1'
        type: string
      force_generation:
        description: 'Force generation even if recent articles exist'
        required: false
        default: false
        type: boolean

permissions:
  contents: write

jobs:
  generate-content:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install basic dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests python-dateutil pytz

      - name: Create environment file
        run: |
          echo "GOOGLE_ADSENSE_ID=${{ secrets.GOOGLE_ADSENSE_ID }}" >> .env
          echo "AMAZON_AFFILIATE_TAG=${{ secrets.AMAZON_AFFILIATE_TAG }}" >> .env
          echo "GOOGLE_ANALYTICS_ID=${{ secrets.GOOGLE_ANALYTICS_ID }}" >> .env

      - name: Check if generation needed
        id: check
        run: |
          if [ "${{ github.event.inputs.force_generation }}" = "true" ]; then
            echo "should_generate=true" >> $GITHUB_OUTPUT
            echo "reason=forced" >> $GITHUB_OUTPUT
          else
            recent_articles=$(find content/articles -name "*.md" -mtime -1 | wc -l)
            if [ "$recent_articles" -eq 0 ]; then
              echo "should_generate=true" >> $GITHUB_OUTPUT
              echo "reason=no_recent_content" >> $GITHUB_OUTPUT
            else
              echo "should_generate=false" >> $GITHUB_OUTPUT
              echo "reason=recent_content_exists" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Generate article content
        if: steps.check.outputs.should_generate == 'true'
        run: |
          ARTICLE_COUNT="${{ github.event.inputs.article_count || '1' }}"
          echo "Generating $ARTICLE_COUNT article(s)..."
          
          # Create articles directory
          mkdir -p content/articles
          
          # Create simple article
          DATE=$(date +%Y-%m-%d)
          FILENAME="content/articles/smart-home-guide-$DATE.md"
          
          cat > "$FILENAME" << 'EOF'
---
title: "Best Smart Home Devices 2025: Complete Buying Guide"
description: "Discover the top smart home devices for 2025. Expert reviews, comparisons, and buying advice for smart plugs, lights, security cameras, and more."
date: 2025-08-31T15:00:00Z
categories: ["smart-home", "reviews"]
tags: ["smart home", "automation", "IoT", "reviews", "2025"]
keywords: ["smart home devices", "home automation", "smart plugs", "smart lights"]
featured: true
rating: 4.5
author: "Smart Home Team"
---

## Introduction

Smart home technology has revolutionized how we interact with our living spaces. In 2025, the market offers more choices than ever before, making it essential to understand which devices provide the best value and functionality.

## Top Smart Home Categories

### 1. Smart Plugs and Outlets

Smart plugs are the easiest entry point into home automation. They allow you to control any device remotely and set schedules for automatic operation.

**Key Features:**
- Remote control via smartphone apps
- Voice control with Alexa, Google Assistant, and Siri
- Energy monitoring capabilities
- Scheduling and automation features

### 2. Smart Lighting Solutions

Smart lights offer convenience, energy savings, and ambiance control that traditional lighting cannot match.

**Popular Options:**
- Color-changing LED bulbs
- Dimmer switches and controls
- Motion-activated lighting
- Outdoor smart lighting systems

### 3. Smart Security Systems

Home security has been transformed by smart technology, offering real-time monitoring and remote access.

**Essential Components:**
- Video doorbells with two-way communication
- Indoor and outdoor security cameras
- Smart locks with keyless entry
- Motion sensors and alarms

## Installation and Setup

Setting up your smart home devices is typically straightforward:

1. **Download the manufacturer's app**
2. **Connect devices to your WiFi network**
3. **Configure automation rules and schedules**
4. **Integrate with voice assistants if desired**

## Cost Considerations

Smart home devices range from budget-friendly to premium options:

- **Entry Level**: $15-50 per device
- **Mid-Range**: $50-150 per device
- **Premium**: $150+ per device

## Conclusion

Smart home technology continues to evolve, offering increasingly sophisticated features at more accessible price points. Start with basic devices like smart plugs and lights, then expand your system based on your needs and preferences.

The key to a successful smart home is choosing devices that integrate well together and match your lifestyle requirements.
EOF
          
          echo "Generated article: $FILENAME"
          echo "generated_file=$FILENAME" >> $GITHUB_OUTPUT

      - name: Commit new content
        if: steps.check.outputs.should_generate == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          git add content/articles/*.md
          
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Auto: Daily content update - $(date '+%Y-%m-%d')
            
            Generated new smart home article with expert recommendations
            
            🤖 Generated with Claude Code
            
            Co-Authored-By: Claude <noreply@anthropic.com>"
            
            git push
            echo "New content pushed successfully"
          fi

      - name: Send Telegram notification
        if: always()
        run: |
          if [ -n "${{ secrets.TELEGRAM_BOT_TOKEN }}" ] && [ -n "${{ secrets.TELEGRAM_CHAT_ID }}" ]; then
            
            # Get China time
            china_time=$(date -u '+%m-%d %H:%M')
            
            # Determine status
            if [ "${{ steps.check.outputs.should_generate }}" = "true" ] && [ "${{ job.status }}" = "success" ]; then
              status_emoji="✅"
              status_text="内容生成成功"
              details="📝 新文章已发布"
            elif [ "${{ steps.check.outputs.should_generate }}" = "false" ]; then
              status_emoji="ℹ️"
              status_text="内容生成跳过"
              details="原因: 最近已有内容发布"
            else
              status_emoji="❌"
              status_text="内容生成失败"
              details="请检查工作流日志"
            fi
            
            message="$status_emoji *AI智能家居中心* | $china_time

*状态*: $status_text

$details

🌐 [查看网站](https://ai-smarthome.vercel.app/)

_🤖 GitHub Actions v2 (简化版)_"
            
            result=$(curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
              -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" \
              -d "text=$message" \
              -d "parse_mode=Markdown" \
              -d "disable_web_page_preview=true")
            
            if echo "$result" | grep -q '"ok":true'; then
              echo "SUCCESS: Telegram notification sent"
            else
              echo "ERROR: Telegram notification failed"
              echo "Response: $result"
            fi
          else
            echo "Telegram credentials not configured"
          fi

      - name: Workflow summary
        if: always()
        run: |
          echo "=== Daily Content Generation Summary ==="
          echo "Should generate: ${{ steps.check.outputs.should_generate }}"
          echo "Reason: ${{ steps.check.outputs.reason }}"
          echo "Job status: ${{ job.status }}"
          echo "======================================"