name: Realtime Content Dispatch

on:
  repository_dispatch:
    types: [realtime_content_request]

permissions:
  contents: write

jobs:
  dispatch-generate:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Prepare lineup from payload
        env:
          CLIENT_PAYLOAD: ${{ toJson(github.event.client_payload) }}
        run: |
          mkdir -p data
          python - << 'PY'
          import os, json
          payload = json.loads(os.environ.get('CLIENT_PAYLOAD','{}') or '{}')
          items = payload.get('items') or []
          if not isinstance(items, list) or not items:
              # Fallback to a minimal example if payload malformed
              items = [{
                'keyword': 'smart plug alexa',
                'category': 'smart_plugs',
                'angle': 'best',
                'trend_score': 0.8,
                'reason': 'Dispatch fallback'
              }]
          with open('data/daily_lineup_latest.json','w', encoding='utf-8') as f:
              json.dump(items, f, indent=2, ensure_ascii=False)
          print(f'Prepared lineup with {len(items)} items')
          PY

      - name: Ensure UTF-8 logging
        run: echo "PYTHONIOENCODING=utf-8" >> $GITHUB_ENV

      - name: Generate and enforce quality
        run: |
          python scripts/workflow_quality_enforcer.py --count 1 --max-attempts 5 --pqs-mode

      - name: Content uniqueness guard
        run: |
          if [ -f generated_files.txt ]; then
            echo "Checking uniqueness of generated content..."
            while IFS= read -r file; do
              if [ -f "$file" ]; then
                python scripts/content_uniqueness_guard.py --target "$file" --threshold 0.88 --days 30 || echo "WARNING: Similar content detected for $file"
              fi
            done < generated_files.txt
          else
            echo "No generated_files.txt present; skipping uniqueness guard."
          fi

      - name: Commit new content
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          if [ -n "$(git status --porcelain content/articles/*.md 2>/dev/null)" ]; then
            git add content/articles/*.md
            git add data/realtime_trends/ 2>/dev/null || true
            git add data/generation_history/ 2>/dev/null || true
            current_time=$(date '+%Y-%m-%d %H:%M:%S UTC')
            git commit -m "Realtime Dispatch: Generated 1 article - ${current_time} (CI)"
            git push
          else
            echo "No new articles to commit"
          fi

