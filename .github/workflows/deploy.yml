name: Deploy AI Smart Home Hub to GitHub Pages

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Allow manual triggering

permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
concurrency:
  group: "pages"
  cancel-in-progress: false

defaults:
  run:
    shell: bash

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    env:
      HUGO_VERSION: 0.121.0
    steps:
      - name: Install Hugo CLI
        run: |
          wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \
          && sudo dpkg -i ${{ runner.temp }}/hugo.deb

      - name: Install Dart Sass
        run: sudo snap install dart-sass

      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4

      - name: Create environment file
        run: |
          echo "GOOGLE_ADSENSE_ID=${{ secrets.GOOGLE_ADSENSE_ID }}" >> .env
          echo "AMAZON_AFFILIATE_TAG=${{ secrets.AMAZON_AFFILIATE_TAG }}" >> .env
          echo "GOOGLE_ANALYTICS_ID=${{ secrets.GOOGLE_ANALYTICS_ID }}" >> .env
          echo "SITE_URL=${{ steps.pages.outputs.base_url }}" >> .env

      - name: Generate fresh content (if needed)
        run: |
          # Check if we should generate new content
          if [ -f "scripts/should_generate_content.py" ]; then
            python scripts/should_generate_content.py
            if [ $? -eq 0 ]; then
              echo "Generating fresh content..."
              python scripts/generate_articles.py --batch-size=1
            fi
          fi

      - name: Update keyword data
        run: |
          if [ -f "scripts/update_keywords.py" ]; then
            python scripts/update_keywords.py --cache-refresh
          fi

      - name: Install Node.js dependencies (if package.json exists)
        run: |
          if [ -f "package.json" ]; then
            npm install
          fi

      - name: Build with Hugo
        env:
          HUGO_ENVIRONMENT: production
          HUGO_ENV: production
        run: |
          hugo \
            --gc \
            --minify \
            --baseURL "${{ steps.pages.outputs.base_url }}/"

      - name: Optimize static assets
        run: |
          # Compress images if they exist
          if command -v jpegoptim &> /dev/null && find public -name "*.jpg" -o -name "*.jpeg" | head -1 | grep -q .; then
            find public -name "*.jpg" -o -name "*.jpeg" | xargs jpegoptim --max=85 --strip-all
          fi
          
          if command -v optipng &> /dev/null && find public -name "*.png" | head -1 | grep -q .; then
            find public -name "*.png" | xargs optipng -o2
          fi

      - name: Generate sitemap index
        run: |
          if [ -f "scripts/generate_sitemap_index.py" ]; then
            python scripts/generate_sitemap_index.py --output-dir=public
          fi

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

      - name: Notify build completion
        if: always()
        run: |
          if [ -f "scripts/notify_build.py" ] && [ "${{ secrets.TELEGRAM_BOT_TOKEN }}" != "" ]; then
            python scripts/notify_build.py \
              --status="${{ job.status }}" \
              --site-url="${{ steps.pages.outputs.base_url }}" \
              --commit-hash="${{ github.sha }}" \
              --commit-message="${{ github.event.head_commit.message }}"
          fi

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Notify deployment success
        if: success()
        run: |
          echo "üéâ Site deployed successfully to ${{ steps.deployment.outputs.page_url }}"

      - name: Update deployment status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const deploymentStatus = '${{ job.status }}' === 'success' ? 'success' : 'failure';
            const siteUrl = '${{ steps.deployment.outputs.page_url }}';
            
            console.log(`Deployment ${deploymentStatus}: ${siteUrl}`);
            
            // You can add additional deployment status updates here
            // For example, updating a status page or sending notifications

  # Post-deployment tasks
  post-deploy:
    runs-on: ubuntu-latest
    needs: [build, deploy]
    if: success()
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests python-dotenv

      - name: Ping search engines
        run: |
          SITE_URL="${{ steps.deploy.outputs.page_url || 'https://your-domain.github.io' }}"
          
          # Ping Google
          curl -s "https://www.google.com/ping?sitemap=${SITE_URL}/sitemap.xml" || echo "Google ping failed"
          
          # Ping Bing  
          curl -s "https://www.bing.com/ping?sitemap=${SITE_URL}/sitemap.xml" || echo "Bing ping failed"
          
          echo "Search engines notified of sitemap updates"

      - name: Cache cleanup
        run: |
          # Clean up old cache files if cleanup script exists
          if [ -f "scripts/cleanup_cache.py" ]; then
            python scripts/cleanup_cache.py --older-than=7d
          fi

      - name: Performance audit
        run: |
          SITE_URL="${{ steps.deploy.outputs.page_url || 'https://your-domain.github.io' }}"
          
          # Basic performance check using curl
          echo "=== Performance Audit ==="
          echo "Site URL: ${SITE_URL}"
          
          # Check if site is accessible
          if curl -s --head "${SITE_URL}" | grep -q "200 OK"; then
            echo "‚úÖ Site is accessible"
            
            # Measure response time
            response_time=$(curl -o /dev/null -s -w '%{time_total}' "${SITE_URL}")
            echo "üìä Response time: ${response_time}s"
            
            if (( $(echo "${response_time} < 2.0" | bc -l) )); then
              echo "‚úÖ Response time is good (< 2s)"
            else
              echo "‚ö†Ô∏è Response time is slow (> 2s)"
            fi
          else
            echo "‚ùå Site is not accessible"
            exit 1
          fi

      - name: Final notification
        if: always()
        run: |
          if [ -f "scripts/notify_deployment_complete.py" ] && [ "${{ secrets.TELEGRAM_BOT_TOKEN }}" != "" ]; then
            python scripts/notify_deployment_complete.py \
              --status="${{ job.status }}" \
              --site-url="${{ steps.deploy.outputs.page_url || 'https://your-domain.github.io' }}" \
              --build-duration="${{ github.event.head_commit.timestamp }}"
          fi