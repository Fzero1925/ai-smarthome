#!/usr/bin/env python3
"""
📄 文章图片配置更新工具
批量更新所有文章的featured_image配置，解决AdSense图片要求

功能：
- 自动分析文章关键词和分类
- 智能匹配产品图片数据库
- 批量更新featured_image配置
- 添加SEO优化的Alt标签

作者：Smart Home Research Team
版本：1.0.0
日期：2025-09-09
"""

import os
import sys
import json
import re
from pathlib import Path
from typing import Dict, List, Optional, Tuple
from datetime import datetime
import codecs
import random

# 解决Windows编码问题
if sys.platform == "win32":
    try:
        sys.stdout = codecs.getwriter("utf-8")(sys.stdout.detach())
        sys.stderr = codecs.getwriter("utf-8")(sys.stderr.detach())
    except Exception:
        pass

class ArticleImageUpdater:
    """文章图片配置更新器"""
    
    def __init__(self, articles_dir: str = "content/articles"):
        self.articles_dir = Path(articles_dir)
        self.data_dir = Path("data")
        self.data_dir.mkdir(exist_ok=True)
        
        # 完整的产品图片映射数据库
        self.image_database = {
            'smart-plugs': [
                {'path': '/images/products/smart-plugs/amazon-smart-plug-hero.jpg', 'alt': 'Amazon Smart Plug - Best Alexa compatible smart outlet 2025', 'title': 'Amazon Smart Plug'},
                {'path': '/images/products/smart-plugs/amazon-smart-plug-main.jpg', 'alt': 'Smart plug with energy monitoring - Alexa WiFi outlet', 'title': 'Alexa Smart Plug'},
                {'path': '/images/products/smart-plugs/govee-wifi-smart-plug.jpg', 'alt': 'Govee WiFi Smart Plug - Voice control outlet with app', 'title': 'Govee Smart Plug'},
                {'path': '/images/products/smart-plugs/tp-link-kasa-hs103.jpg', 'alt': 'TP-Link Kasa Smart Plug - Reliable WiFi outlet for home automation', 'title': 'TP-Link Kasa HS103'},
                {'path': '/images/products/smart-plugs/smart-plug-comparison-2025.jpg', 'alt': 'Smart plug comparison guide 2025 - Best WiFi outlets reviewed', 'title': 'Smart Plug Comparison 2025'}
            ],
            'smart-thermostats': [
                {'path': '/images/products/smart-thermostats/nest-learning-thermostat.jpg', 'alt': 'Google Nest Learning Thermostat - Smart climate control 2025', 'title': 'Nest Learning Thermostat'},
                {'path': '/images/products/smart-thermostats/ecobee-smartthermostat.jpg', 'alt': 'Ecobee SmartThermostat with voice control - Energy saving', 'title': 'Ecobee SmartThermostat'},
                {'path': '/images/products/smart-thermostats/honeywell-t9.jpg', 'alt': 'Honeywell T9 Smart Thermostat - WiFi programmable thermostat', 'title': 'Honeywell T9'},
                {'path': '/images/products/smart-thermostats/thermostat-installation.jpg', 'alt': 'Smart thermostat installation guide - Professional setup', 'title': 'Smart Thermostat Installation'},
                {'path': '/images/products/smart-thermostats/energy-savings-comparison.jpg', 'alt': 'Smart thermostat energy savings comparison - Cost analysis 2025', 'title': 'Energy Savings Analysis'}
            ],
            'security-cameras': [
                {'path': '/images/products/security-cameras/arlo-pro-4.jpg', 'alt': 'Arlo Pro 4 Security Camera - Wireless home surveillance', 'title': 'Arlo Pro 4'},
                {'path': '/images/products/security-cameras/ring-spotlight-cam.jpg', 'alt': 'Ring Spotlight Cam - Motion detection security camera', 'title': 'Ring Spotlight Cam'},
                {'path': '/images/products/security-cameras/wyze-cam-v3.jpg', 'alt': 'Wyze Cam v3 - Affordable smart security camera with night vision', 'title': 'Wyze Cam v3'},
                {'path': '/images/products/security-cameras/security-system-setup.jpg', 'alt': 'Complete home security camera system setup guide', 'title': 'Security System Setup'},
                {'path': '/images/products/security-cameras/outdoor-camera-features.jpg', 'alt': 'Outdoor security camera features comparison - Weather resistant', 'title': 'Outdoor Camera Features'}
            ],
            'robot-vacuums': [
                {'path': '/images/products/robot-vacuums/roomba-i7.jpg', 'alt': 'iRobot Roomba i7+ - Self-emptying robot vacuum 2025', 'title': 'Roomba i7+'},
                {'path': '/images/products/robot-vacuums/roborock-s7.jpg', 'alt': 'Roborock S7 - Mopping robot vacuum with sonic technology', 'title': 'Roborock S7'},
                {'path': '/images/products/robot-vacuums/shark-iq.jpg', 'alt': 'Shark IQ Robot Vacuum - Self-emptying with mapping', 'title': 'Shark IQ Robot'},
                {'path': '/images/products/robot-vacuums/vacuum-comparison.jpg', 'alt': 'Robot vacuum comparison 2025 - Features and performance', 'title': 'Robot Vacuum Comparison'},
                {'path': '/images/products/robot-vacuums/cleaning-patterns.jpg', 'alt': 'Robot vacuum cleaning patterns - Navigation technology explained', 'title': 'Cleaning Patterns Guide'}
            ],
            'smart-bulbs': [
                {'path': '/images/products/smart-bulbs/philips-hue-color.jpg', 'alt': 'Philips Hue Color Bulbs - RGB smart lighting system', 'title': 'Philips Hue Color'},
                {'path': '/images/products/smart-bulbs/wyze-color-bulb.jpg', 'alt': 'Wyze Color Bulb - Affordable smart LED with color changing', 'title': 'Wyze Color Bulb'},
                {'path': '/images/products/smart-bulbs/lifx-color.jpg', 'alt': 'LIFX Color Smart Bulb - Vibrant WiFi LED lighting', 'title': 'LIFX Color'},
                {'path': '/images/products/smart-bulbs/smart-lighting-setup.jpg', 'alt': 'Smart lighting setup guide - Creating perfect ambiance', 'title': 'Smart Lighting Setup'},
                {'path': '/images/products/smart-bulbs/color-temperature-guide.jpg', 'alt': 'Smart bulb color temperature guide - Warm to cool lighting', 'title': 'Color Temperature Guide'}
            ],
            'smart-speakers': [
                {'path': '/images/products/smart-speakers/echo-dot-5.jpg', 'alt': 'Amazon Echo Dot 5th Gen - Compact smart speaker with Alexa', 'title': 'Echo Dot 5th Gen'},
                {'path': '/images/products/smart-speakers/google-nest-mini.jpg', 'alt': 'Google Nest Mini - Small smart speaker with Assistant', 'title': 'Google Nest Mini'},
                {'path': '/images/products/smart-speakers/homepod-mini.jpg', 'alt': 'Apple HomePod Mini - Premium compact smart speaker', 'title': 'HomePod Mini'},
                {'path': '/images/products/smart-speakers/speaker-comparison.jpg', 'alt': 'Smart speaker comparison 2025 - Features and sound quality', 'title': 'Smart Speaker Comparison'},
                {'path': '/images/products/smart-speakers/voice-assistant-setup.jpg', 'alt': 'Voice assistant setup guide - Optimizing smart speaker', 'title': 'Voice Assistant Setup'}
            ],
            'smart-lighting': [
                {'path': '/images/products/smart-lighting/hue-lightstrip.jpg', 'alt': 'Philips Hue Lightstrip Plus - Flexible smart LED strips', 'title': 'Hue Lightstrip Plus'},
                {'path': '/images/products/smart-lighting/lutron-caseta.jpg', 'alt': 'Lutron Caseta Smart Switch - Professional grade lighting control', 'title': 'Lutron Caseta'},
                {'path': '/images/products/smart-lighting/kasa-smart-switch.jpg', 'alt': 'Kasa Smart WiFi Switch - Easy installation lighting control', 'title': 'Kasa Smart Switch'},
                {'path': '/images/products/smart-lighting/lighting-scenes.jpg', 'alt': 'Smart lighting scenes setup - Mood and ambiance control', 'title': 'Smart Lighting Scenes'},
                {'path': '/images/products/smart-lighting/dimmer-installation.jpg', 'alt': 'Smart dimmer installation guide - Step by step setup', 'title': 'Smart Dimmer Installation'}
            ]
        }
        
        # 关键词到分类的映射
        self.keyword_to_category = {
            'smart plug': 'smart-plugs',
            'wifi outlet': 'smart-plugs', 
            'alexa plug': 'smart-plugs',
            'smart outlet': 'smart-plugs',
            'thermostat': 'smart-thermostats',
            'climate control': 'smart-thermostats',
            'temperature': 'smart-thermostats',
            'heating': 'smart-thermostats',
            'security camera': 'security-cameras',
            'surveillance': 'security-cameras',
            'home camera': 'security-cameras',
            'wireless camera': 'security-cameras',
            'robot vacuum': 'robot-vacuums',
            'vacuum cleaner': 'robot-vacuums',
            'robotic vacuum': 'robot-vacuums',
            'smart bulb': 'smart-bulbs',
            'led bulb': 'smart-bulbs',
            'smart light': 'smart-bulbs',
            'color bulb': 'smart-bulbs',
            'smart speaker': 'smart-speakers',
            'echo': 'smart-speakers',
            'alexa': 'smart-speakers',
            'google home': 'smart-speakers',
            'smart lighting': 'smart-lighting',
            'light switch': 'smart-lighting',
            'smart switch': 'smart-lighting',
            'lighting control': 'smart-lighting'
        }
    
    def analyze_article(self, article_path: Path) -> Dict:
        """分析文章内容并确定分类"""
        try:
            content = article_path.read_text(encoding='utf-8')
            
            # 提取front matter
            if not content.startswith('---'):
                return {'error': 'Invalid article format'}
            
            lines = content.split('\n')
            front_matter = {}
            content_start = 1
            
            for i, line in enumerate(lines[1:], 1):
                if line.strip() == '---':
                    content_start = i + 1
                    break
                    
                if ':' in line:
                    key, value = line.split(':', 1)
                    key = key.strip()
                    value = value.strip().strip('"').strip("'")
                    
                    # 处理列表格式
                    if value.startswith('[') and value.endswith(']'):
                        value = [item.strip().strip('"').strip("'") for item in value[1:-1].split(',')]
                    
                    front_matter[key] = value
            
            # 分析内容确定分类
            title = front_matter.get('title', '')
            keywords = front_matter.get('keywords', [])
            categories = front_matter.get('categories', [])
            
            # 合并所有文本用于分析
            analysis_text = f"{title} {' '.join(keywords) if isinstance(keywords, list) else keywords} {' '.join(categories) if isinstance(categories, list) else categories}".lower()
            
            # 确定最佳分类
            category_scores = {}
            for keyword, category in self.keyword_to_category.items():
                if keyword in analysis_text:
                    category_scores[category] = category_scores.get(category, 0) + 1
            
            # 选择得分最高的分类
            best_category = 'smart-plugs'  # 默认分类
            if category_scores:
                best_category = max(category_scores.items(), key=lambda x: x[1])[0]
            
            return {
                'title': title,
                'keywords': keywords,
                'categories': categories,
                'front_matter': front_matter,
                'best_category': best_category,
                'content_start': content_start,
                'full_content': content
            }
            
        except Exception as e:
            return {'error': f'Failed to analyze article: {e}'}
    
    def select_best_image(self, category: str, article_title: str) -> Dict:
        """为文章选择最佳图片"""
        if category not in self.image_database:
            category = 'smart-plugs'  # 默认分类
        
        images = self.image_database[category]
        
        # 基于文章标题智能选择
        title_lower = article_title.lower()
        
        # 优先选择与标题匹配的图片
        for image in images:
            image_title_lower = image['title'].lower()
            if any(word in image_title_lower for word in title_lower.split() if len(word) > 3):
                return image
        
        # 如果没有匹配的，选择第一张（通常是主图）
        return images[0] if images else {
            'path': '/images/products/general/default-product.jpg',
            'alt': f'Professional {category.replace("-", " ")} guide 2025',
            'title': 'Smart Home Device'
        }
    
    def update_article_image(self, article_path: Path, force_update: bool = False) -> Dict:
        """更新单个文章的图片配置"""
        print(f"📝 处理文章: {article_path.name}")
        
        # 分析文章
        analysis = self.analyze_article(article_path)
        if 'error' in analysis:
            return {'success': False, 'error': analysis['error']}
        
        # 检查是否已有featured_image配置
        if not force_update and analysis['front_matter'].get('featured_image'):
            print(f"  ⏩ 已有图片配置，跳过")
            return {'success': True, 'action': 'skipped', 'reason': 'already_has_image'}
        
        # 选择最佳图片
        best_image = self.select_best_image(analysis['best_category'], analysis['title'])
        
        # 更新front matter
        lines = analysis['full_content'].split('\n')
        front_matter_end = analysis['content_start'] - 1
        
        # 在front matter中添加或更新featured_image
        new_lines = lines[:1]  # 保留开始的 ---
        
        # 添加所有现有的front matter，但跳过featured_image
        for line in lines[1:front_matter_end]:
            if not line.startswith('featured_image:'):
                new_lines.append(line)
        
        # 添加新的featured_image配置
        new_lines.append(f'featured_image: "{best_image["path"]}"')
        
        # 添加剩余内容
        new_lines.extend(lines[front_matter_end:])
        
        # 写回文件
        try:
            new_content = '\n'.join(new_lines)
            article_path.write_text(new_content, encoding='utf-8')
            
            print(f"  ✅ 更新成功: {best_image['path']}")
            return {
                'success': True,
                'action': 'updated',
                'image_path': best_image['path'],
                'category': analysis['best_category'],
                'title': analysis['title']
            }
            
        except Exception as e:
            print(f"  ❌ 更新失败: {e}")
            return {'success': False, 'error': str(e)}
    
    def batch_update_articles(self, force_update: bool = False) -> Dict:
        """批量更新所有文章"""
        print("🚀 开始批量更新文章图片配置...")
        print("=" * 50)
        
        if not self.articles_dir.exists():
            return {'success': False, 'error': f'Articles directory not found: {self.articles_dir}'}
        
        # 获取所有markdown文件
        md_files = list(self.articles_dir.glob("*.md"))
        print(f"📊 发现 {len(md_files)} 篇文章需要处理")
        print()
        
        results = []
        stats = {'updated': 0, 'skipped': 0, 'failed': 0}
        
        for article_file in sorted(md_files):
            result = self.update_article_image(article_file, force_update)
            results.append({
                'file': article_file.name,
                **result
            })
            
            if result.get('success'):
                if result.get('action') == 'updated':
                    stats['updated'] += 1
                elif result.get('action') == 'skipped':
                    stats['skipped'] += 1
            else:
                stats['failed'] += 1
        
        # 统计结果
        print(f"\n🎉 批量更新完成!")
        print(f"📊 处理统计:")
        print(f"   - 成功更新: {stats['updated']} 篇")
        print(f"   - 跳过处理: {stats['skipped']} 篇") 
        print(f"   - 处理失败: {stats['failed']} 篇")
        print(f"   - 总计处理: {len(md_files)} 篇")
        
        # 按分类统计
        category_stats = {}
        for result in results:
            if result.get('success') and result.get('category'):
                category = result['category']
                category_stats[category] = category_stats.get(category, 0) + 1
        
        if category_stats:
            print(f"\n📂 分类统计:")
            for category, count in sorted(category_stats.items()):
                print(f"   - {category}: {count} 篇")
        
        return {
            'success': True,
            'stats': stats,
            'category_stats': category_stats,
            'results': results
        }
    
    def generate_report(self, results: Dict) -> str:
        """生成详细报告"""
        report_lines = [
            "# 文章图片配置更新报告",
            f"生成时间: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
            "",
            "## 总体统计",
            f"- 成功更新: {results['stats']['updated']} 篇",
            f"- 跳过处理: {results['stats']['skipped']} 篇",
            f"- 处理失败: {results['stats']['failed']} 篇",
            "",
            "## 分类分布"
        ]
        
        for category, count in sorted(results['category_stats'].items()):
            report_lines.append(f"- {category.replace('-', ' ').title()}: {count} 篇")
        
        report_lines.extend([
            "",
            "## 详细结果"
        ])
        
        for result in results['results']:
            if result.get('success') and result.get('action') == 'updated':
                report_lines.append(f"- ✅ {result['file']}: {result.get('image_path', 'N/A')}")
            elif result.get('action') == 'skipped':
                report_lines.append(f"- ⏩ {result['file']}: 已有图片配置")
            else:
                report_lines.append(f"- ❌ {result['file']}: {result.get('error', '未知错误')}")
        
        return '\n'.join(report_lines)

def main():
    """主函数"""
    print("📄 AI Smart Home Hub - 文章图片配置更新工具")
    print("=" * 55)
    
    updater = ArticleImageUpdater()
    
    # 解析命令行参数
    force_update = '--force' in sys.argv
    
    if force_update:
        print("⚠️ 强制更新模式：将覆盖现有的图片配置")
        print()
    
    # 执行批量更新
    results = updater.batch_update_articles(force_update=force_update)
    
    if results.get('success'):
        # 生成详细报告
        report = updater.generate_report(results)
        
        # 保存报告
        report_file = Path("data/image_update_report.md")
        report_file.write_text(report, encoding='utf-8')
        
        print(f"\n📋 详细报告已保存: {report_file}")
        print("\n🎯 下一步建议:")
        print("   1. 运行 hugo server 预览效果")
        print("   2. 检查图片显示是否正常")
        print("   3. 如有需要，可运行 --force 强制更新")
        print("   4. 准备申请 Google AdSense!")
    else:
        print(f"❌ 批量更新失败: {results.get('error', '未知错误')}")
        sys.exit(1)

if __name__ == "__main__":
    main()

# === v2: write-back helper for front-matter (YAML) ===
import re
def apply_images_front_matter(md_text: str, assignment: dict):
    featured = assignment.get('hero',{}).get('src')
    if featured:
        md_text = re.sub(r'(?m)^featured_image:.*$', f'featured_image: {featured}', md_text)
    imgs = [featured] + [i.get('src') for i in assignment.get('inline',[]) if i.get('src')]
    imgs = [i for i in imgs if i]
    if imgs:
        block = "images:\n" + "\n".join([f"  - {u}" for u in imgs])
        if "images:" in md_text:
            md_text = re.sub(r'(?s)images:\n.*?(\n\w|\Z)', block + "\n", md_text)
        else:
            md_text = md_text.replace('---\n', f'---\n{block}\n', 1)
    return md_text
